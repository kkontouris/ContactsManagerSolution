// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ContactsManager.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240825202634_TaxIdentificationNumber")]
    partial class TaxIdentificationNumber
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ContactsManager.Core.Domain.IdentityEntities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ContactsManager.Core.Domain.IdentityEntities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entities.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            CountryId = new Guid("14629847-905a-4a0e-9abe-80b61655c5cb"),
                            CountryName = "Argentina"
                        },
                        new
                        {
                            CountryId = new Guid("56bf46a4-02b8-4693-a0f5-0a95e2218bdc"),
                            CountryName = "Austria"
                        },
                        new
                        {
                            CountryId = new Guid("12e15727-d369-49a9-8b13-bc22e9362179"),
                            CountryName = "Belgium"
                        },
                        new
                        {
                            CountryId = new Guid("8f30bedc-47dd-4286-8950-73d8a68e5d41"),
                            CountryName = "Brazil"
                        },
                        new
                        {
                            CountryId = new Guid("501c6d33-1bbe-45f1-8fbd-2275913c6218"),
                            CountryName = "Bulgaria"
                        },
                        new
                        {
                            CountryId = new Guid("1c6a6c34-2e1c-4cd5-bb2d-502fbd035e25"),
                            CountryName = "China"
                        },
                        new
                        {
                            CountryId = new Guid("1adc9579-d0e4-484f-9ee9-73bf4bb98f09"),
                            CountryName = "Colombia"
                        },
                        new
                        {
                            CountryId = new Guid("382bfca7-304f-4ba4-8361-5bf663e5fff8"),
                            CountryName = "Croatia"
                        },
                        new
                        {
                            CountryId = new Guid("c4cf75e9-c4bd-4f88-9a8c-b39793502f33"),
                            CountryName = "Cyprus"
                        },
                        new
                        {
                            CountryId = new Guid("606ab180-460f-4d2a-b4bf-260e8d5e07f5"),
                            CountryName = "Czechia"
                        },
                        new
                        {
                            CountryId = new Guid("fbe47559-5c93-4f9f-91d7-340238f2cf64"),
                            CountryName = "Aigypt"
                        },
                        new
                        {
                            CountryId = new Guid("67e14d87-9021-43ee-a848-0883ca27b5df"),
                            CountryName = "Finland"
                        },
                        new
                        {
                            CountryId = new Guid("a1ae044e-92e6-4b99-819a-d439097546b2"),
                            CountryName = "France"
                        },
                        new
                        {
                            CountryId = new Guid("f0258764-2723-408c-8201-1b0ae8ed084c"),
                            CountryName = "Germany"
                        },
                        new
                        {
                            CountryId = new Guid("999d162f-90f0-4cd6-b922-ac5f345e7036"),
                            CountryName = "Greece"
                        },
                        new
                        {
                            CountryId = new Guid("0cea258e-be82-44ed-b673-fc257bf8c7df"),
                            CountryName = "Hungary"
                        },
                        new
                        {
                            CountryId = new Guid("5ff91c1a-0054-4605-8be3-46f6bc69c02b"),
                            CountryName = "Ireland"
                        },
                        new
                        {
                            CountryId = new Guid("9f1837a1-f292-4201-963a-2c51acaa480b"),
                            CountryName = "Italy"
                        },
                        new
                        {
                            CountryId = new Guid("dd251e52-6f3f-4e4b-9ba4-bc1fbb8b3d33"),
                            CountryName = "Luxenburg"
                        },
                        new
                        {
                            CountryId = new Guid("b887bcf4-fd45-492b-9ffc-8a1e17352acb"),
                            CountryName = "Malta"
                        },
                        new
                        {
                            CountryId = new Guid("39374b6c-04d0-405c-8ba8-bbdf420d25ae"),
                            CountryName = "Mexico"
                        },
                        new
                        {
                            CountryId = new Guid("abdbd6fa-64cb-415f-adf0-b2f8b38fb04c"),
                            CountryName = "Monaco"
                        },
                        new
                        {
                            CountryId = new Guid("e0c52fad-c0d8-4ec1-a791-a5edc4ce9fb2"),
                            CountryName = "Netherlands"
                        },
                        new
                        {
                            CountryId = new Guid("792bd91e-1fd0-4d76-b2cf-b41982c3efbe"),
                            CountryName = "New Zeland"
                        },
                        new
                        {
                            CountryId = new Guid("d62a9029-1f35-4d28-960e-d5c2813a1486"),
                            CountryName = "North Macedonia"
                        },
                        new
                        {
                            CountryId = new Guid("21cc9df2-76a4-4c8b-bad6-826d812509ce"),
                            CountryName = "Poland"
                        },
                        new
                        {
                            CountryId = new Guid("f33c50b8-e595-4e25-84b2-a3f6b86cb410"),
                            CountryName = "Portogal"
                        },
                        new
                        {
                            CountryId = new Guid("58db45b9-8b47-4171-8678-b21436ed5a41"),
                            CountryName = "Romania"
                        },
                        new
                        {
                            CountryId = new Guid("1705d418-6b17-482d-abd6-2bf3b2ece5a4"),
                            CountryName = "Russia"
                        },
                        new
                        {
                            CountryId = new Guid("fb154007-565b-4b98-bedd-9e48338b129d"),
                            CountryName = "Slovakia"
                        },
                        new
                        {
                            CountryId = new Guid("01005ec7-121a-4d1f-973d-6bfdeb3b7f56"),
                            CountryName = "Slovenia"
                        },
                        new
                        {
                            CountryId = new Guid("6df7a76c-8f1f-4238-9261-0af30392d25e"),
                            CountryName = "Spain"
                        },
                        new
                        {
                            CountryId = new Guid("09ef2aee-08f2-454f-a20b-86cec64530bb"),
                            CountryName = "Sweeden"
                        },
                        new
                        {
                            CountryId = new Guid("fb2a83ef-d392-47fd-b0a8-40088ad6bc84"),
                            CountryName = "Turkey"
                        },
                        new
                        {
                            CountryId = new Guid("36aac634-b449-48e8-b4d3-bf3ca905f7fd"),
                            CountryName = "United Kingdom"
                        },
                        new
                        {
                            CountryId = new Guid("15a46298-67ed-4dce-9509-9e3eeb2f4e4c"),
                            CountryName = "Uruguay"
                        },
                        new
                        {
                            CountryId = new Guid("a4868117-8ad2-4cf6-971d-62bd0ed3cc92"),
                            CountryName = "Venezuela"
                        });
                });

            modelBuilder.Entity("Entities.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReceiveNewsLeters")
                        .HasColumnType("bit");

                    b.Property<string>("TaxIdentificationNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(9)")
                        .HasDefaultValue("123456789")
                        .HasColumnName("TaxIdentificationNumber");

                    b.HasKey("PersonId");

                    b.HasIndex("CountryId");

                    b.ToTable("Persons", (string)null);

                    b.HasCheckConstraint("CHK_TaxIdentificationNumber", "LEN([TaxIdentificationNumber])=9");

                    b.HasData(
                        new
                        {
                            PersonId = new Guid("fc11e02d-80d9-4a0b-95f1-ca53cd4f86d4"),
                            Address = "Parkside 54",
                            CountryId = new Guid("56bf46a4-02b8-4693-a0f5-0a95e2218bdc"),
                            DateOfBirth = new DateTime(1989, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mwebsdale0@people.com.cn",
                            Gender = "Female",
                            PersonName = "Marguerite",
                            ReceiveNewsLeters = false,
                            TaxIdentificationNumber = "156950492"
                        },
                        new
                        {
                            PersonId = new Guid("9a9e6f41-31f8-4474-8d99-886c36331e04"),
                            Address = "6 Morningstar Circle",
                            CountryId = new Guid("1705d418-6b17-482d-abd6-2bf3b2ece5a4"),
                            DateOfBirth = new DateTime(1990, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ushears1@globo.com",
                            Gender = "Female",
                            PersonName = "Ursa",
                            ReceiveNewsLeters = false,
                            TaxIdentificationNumber = "156950491"
                        },
                        new
                        {
                            PersonId = new Guid("8bb39878-0fcc-498b-ac8a-1fdd58862c3b"),
                            Address = "73 Heath Avenue",
                            CountryId = new Guid("a1ae044e-92e6-4b99-819a-d439097546b2"),
                            DateOfBirth = new DateTime(1995, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fbowsher2@howstuffworks.com",
                            Gender = "Male",
                            PersonName = "Franchot",
                            ReceiveNewsLeters = false,
                            TaxIdentificationNumber = "156950493"
                        },
                        new
                        {
                            PersonId = new Guid("af07f91f-8631-4bf5-a9cf-22fcac279abe"),
                            Address = "83187 Merry Drive",
                            CountryId = new Guid("12e15727-d369-49a9-8b13-bc22e9362179"),
                            DateOfBirth = new DateTime(1987, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "asarvar3@dropbox.com",
                            Gender = "Male",
                            PersonName = "Angie",
                            ReceiveNewsLeters = false,
                            TaxIdentificationNumber = "156950494"
                        },
                        new
                        {
                            PersonId = new Guid("788ed820-a81c-49a7-9727-e0f162e2ddcb"),
                            Address = "50467 Holy Cross Crossing",
                            CountryId = new Guid("56bf46a4-02b8-4693-a0f5-0a95e2218bdc"),
                            DateOfBirth = new DateTime(1995, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ttregona4@stumbleupon.com",
                            Gender = "Gender",
                            PersonName = "Tani",
                            ReceiveNewsLeters = false,
                            TaxIdentificationNumber = "156950495"
                        },
                        new
                        {
                            PersonId = new Guid("04a15249-2c78-4d40-b827-02c45f51d906"),
                            Address = "97570 Raven Circle",
                            CountryId = new Guid("8f30bedc-47dd-4286-8950-73d8a68e5d41"),
                            DateOfBirth = new DateTime(1988, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mlingfoot5@netvibes.com",
                            Gender = "Male",
                            PersonName = "Mitchael",
                            ReceiveNewsLeters = false,
                            TaxIdentificationNumber = "156950496"
                        },
                        new
                        {
                            PersonId = new Guid("72ac986c-3c9b-41dd-82f1-63e2939cbc66"),
                            Address = "57449 Brown Way",
                            CountryId = new Guid("12e15727-d369-49a9-8b13-bc22e9362179"),
                            DateOfBirth = new DateTime(1983, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mjarrell6@wisc.edu",
                            Gender = "Male",
                            PersonName = "Maddy",
                            ReceiveNewsLeters = false,
                            TaxIdentificationNumber = "156950497"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Person", b =>
                {
                    b.HasOne("Entities.Country", "Country")
                        .WithMany("Persons")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ContactsManager.Core.Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ContactsManager.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ContactsManager.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ContactsManager.Core.Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContactsManager.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ContactsManager.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Country", b =>
                {
                    b.Navigation("Persons");
                });
#pragma warning restore 612, 618
        }
    }
}
